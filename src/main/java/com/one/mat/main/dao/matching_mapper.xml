<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.one.mat.main.dao.MatchingDAO">

<!-- pro_idx 사용하기 위한 쿼리  -->
<select id="MyProfileListDo" resultType="com.one.mat.member.dto.ProfileDTO">
	SELECT *
FROM pro p
INNER JOIN breed b ON p.pro_idx = b.pro_idx
INNER JOIN breedtype bt ON b.breedType_code = bt.breedType_code where member_idx=#{member_idx}
</select>

<!-- 로그인 안했을때 나오는 매칭 리스트 -->
<select id="unloginedMatchingList" resultType="com.one.mat.member.dto.MatchAllDTO">
SELECT
    m.member_gender,
    m.member_dongAddr,
    p.pro_dogName,
    p.pro_dogAge,
    p.pro_dogGender,
    p.pro_dogDesc,
    p.pro_idx,
    (
        SELECT GROUP_CONCAT(ct.charType ORDER BY c.charType_code ASC SEPARATOR ' / ')
        FROM `char` AS c
        JOIN `chartype` AS ct ON c.charType_code = ct.charType_code
        WHERE c.pro_idx = p.pro_idx
    ) AS characteristics,
    (
        SELECT photo_id
        FROM photo ph
        WHERE ph.photo_idfNum = p.pro_idx
            AND ph.photo_type = 4
        ORDER BY ph.photo_id
        LIMIT 1
    ) AS min_photo_id,
    (
        SELECT photo_fileName
        FROM photo ph
        WHERE ph.photo_idfNum = p.pro_idx
            AND ph.photo_type = 4
            AND ph.photo_id = (
                SELECT MIN(ph2.photo_id)
                FROM photo ph2
                WHERE ph2.photo_idfNum = p.pro_idx
                AND ph2.photo_type = 4
            )
        LIMIT 1
    ) AS min_photo_fileName
FROM member AS m
INNER JOIN pro AS p ON m.member_idx = p.member_idx
    AND m.member_quit = 'N'
    AND m.member_loginLock = 'N'
    AND p.pro_idx IN (
        SELECT c.pro_idx
        FROM `char` AS c
        WHERE c.charType_code IN (
            SELECT charType_code
            FROM `char`
        )
        GROUP BY c.pro_idx
    )
ORDER BY RAND()
LIMIT 10;
</select>

<!-- 랜덤매칭 쿼리(자신의 pro_idx 는 제외하며 동주소가 같고, 
			제재여부=N,탈퇴여부=N 이고 성향이 4개 모두 같을 경우 select) -->
<!-- 수정된 matchingList 쿼리 -->
<select id="matchingList" resultType="com.one.mat.member.dto.MatchAllDTO">
	SELECT
	    m.member_gender, 
	    m.member_dongAddr, 
	    p.pro_dogName,   
	    p.pro_dogAge,    
	    p.pro_dogGender,  
	    p.pro_dogDesc,   
	    p.pro_idx, 
	    (
	        SELECT GROUP_CONCAT(ct.charType ORDER BY c.charType_code ASC SEPARATOR ' / ')
	        FROM `char` AS c
	        JOIN `chartype` AS ct ON c.charType_code = ct.charType_code
	        WHERE c.pro_idx = p.pro_idx
	    ) AS characteristics,
	    (
	        SELECT photo_id
	        FROM photo ph
	        WHERE ph.photo_idfNum = p.pro_idx
	            AND ph.photo_type = 4
	        ORDER BY ph.photo_id
	        LIMIT 1
	    ) AS min_photo_id,
	    (
	        SELECT photo_fileName
	        FROM photo ph
	        WHERE ph.photo_idfNum = p.pro_idx
	            AND ph.photo_type = 4
	            AND ph.photo_id = (
	                SELECT MIN(ph2.photo_id)
	                FROM photo ph2
	                WHERE ph2.photo_idfNum = p.pro_idx
	                AND ph2.photo_type = 4
	            )
	        LIMIT 1
	    ) AS min_photo_fileName
	FROM member AS m
	INNER JOIN pro AS p ON m.member_idx = p.member_idx
	WHERE m.member_dongAddr = (SELECT member_dongAddr FROM member WHERE member_idx = #{param1}) 
	    AND m.member_quit = 'N'
	    AND m.member_loginLock = 'N'
	    AND p.pro_idx NOT IN (SELECT pro_idx FROM pro WHERE member_idx = #{param1}) 
	    AND p.member_idx != #{param1} -- 수정된 부분
	    AND p.pro_idx IN (
	        SELECT c.pro_idx
	        FROM `char` AS c
	        WHERE c.charType_code IN (
	            SELECT charType_code
	            FROM `char`
	            WHERE pro_idx = #{param2}
	        )
	        GROUP BY c.pro_idx
	        HAVING COUNT(DISTINCT c.charType_code) = #{param3}
	    )
	    AND m.member_idx != #{param1}
	ORDER BY RAND()
	LIMIT 10;
</select>

<!-- 나 자신의 pro_idx 들을 제외한 나머지 매칭리스트 램덤으로 가져오기 -->
<select id="noMeMatchingList" resultType="com.one.mat.member.dto.MatchAllDTO">
SELECT
    m.member_gender,
    m.member_dongAddr,
    p.pro_dogName,
    p.pro_dogAge,
    p.pro_dogGender,
    p.pro_dogDesc,
    p.pro_idx,
    (
        SELECT GROUP_CONCAT(ct.charType ORDER BY c.charType_code ASC SEPARATOR ' / ')
        FROM `char` AS c
        JOIN `chartype` AS ct ON c.charType_code = ct.charType_code
        WHERE c.pro_idx = p.pro_idx
    ) AS characteristics,
    (
        SELECT photo_id
        FROM photo ph
        WHERE ph.photo_idfNum = p.pro_idx
            AND ph.photo_type = 4
        ORDER BY ph.photo_id
        LIMIT 1
    ) AS min_photo_id,
    (
        SELECT photo_fileName
        FROM photo ph
        WHERE ph.photo_idfNum = p.pro_idx
            AND ph.photo_type = 4
            AND ph.photo_id = (
                SELECT MIN(ph2.photo_id)
                FROM photo ph2
                WHERE ph2.photo_idfNum = p.pro_idx
                AND ph2.photo_type = 4
            )
        LIMIT 1
    ) AS min_photo_fileName
FROM member AS m
INNER JOIN pro AS p ON m.member_idx = p.member_idx
    AND m.member_quit = 'N'
    AND m.member_loginLock = 'N'
    AND p.member_idx != #{param1}
    AND p.pro_idx IN (
        SELECT c.pro_idx
        FROM `char` AS c
        WHERE c.charType_code IN (
            SELECT charType_code
            FROM `char`
        )
        GROUP BY c.pro_idx
    )
ORDER BY RAND()
LIMIT 10;
</select>

<select id="MatchingProOpenDo" resultType="com.one.mat.main.dto.ProOpenDTO">
	SELECT * from proopen where pro_idx = #{param1};
</select>

<!-- 매칭요청 보내기 쿼리문 -->
<insert id="homeSend" parameterType="map" >
	INSERT INTO `match` (pro_sendIdx ,pro_recvIdx) VALUES(#{pro_sendIdx},#{pro_recvIdx})
</insert>

<!-- 매칭요청 보내기 알림테이블 insert 쿼리문 -->
<insert id="matchingSendAlarm">
INSERT INTO alarm (pro_sendIdx, pro_recvIdx, alarm_type, alarm_msg) 
VALUES (#{param1}, #{param2}, 1, '님에게 새로운 매칭 요청이 들어왔어요!')
</insert>

<!-- 프로필 상세보기 쿼리문 -->
<select id="memberDetailListGO" resultType="map">
	SELECT
	    p.*,
	    m.member_gender,
	    m.member_nickName,
	    m.member_dongAddr,
	    (
	        SELECT GROUP_CONCAT(ct.charType ORDER BY c.charType_code ASC SEPARATOR ' / ')
	        FROM `char` AS c
	        JOIN `chartype` AS ct ON c.charType_code = ct.charType_code
	        WHERE c.pro_idx = p.pro_idx
	    ) AS characteristics,
	    (
	        SELECT bt.breedType
	        FROM `breed` AS b
	        JOIN `breedtype` AS bt ON b.breedType_code = bt.breedType_code
	        WHERE b.pro_idx = p.pro_idx
	        LIMIT 1
	    ) AS breed
	FROM `pro` AS p
	JOIN `member` AS m ON p.member_idx = m.member_idx
	WHERE p.pro_idx = #{param1};
</select>


<select id="memberDetailPhotoDo" resultType = "com.one.mat.member.dto.PhotoDTO">
	SELECT pt.photo_id, pt.photo_type, pt.photo_idfNum, pt.photo_fileName, pt.photo_uploadDate
	FROM pro p 
	INNER JOIN photo pt ON pt.photo_idfNum = p.pro_idx where pt.photo_type = 4 and p.pro_idx =#{param1}
</select>


</mapper>